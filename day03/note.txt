  
  1. 클래스 기반의 컴포넌트

  - React.Component를 반드시 상속 받아서 만들어야 한다.
  - 내부에 render() 메소드르 반드시 포함해야 한다 (실제 렌더링할 내용을 반환)
  - 상태 관리를 하지 않으면 업데이트 되지않는다
  - 클래스 컴포넌트에는 state 라는 객체가 있따. 이것이 상태이다.
  - 클래스 컴포넌트 상태 변경 시에는 지정된 메소드를 사용해야 한다.
    setState()!
  -  상태 관리로 인해 업데이트 되는 것을 '리-렌더'라고 표현한다.

  - 옛날에 만들어진 컴포넌트들은 모두 클래스기반이기 때문에 유지관리를 위해 필요하다

  2. 함수형 컴포넌트의 상태관리

  - 상태관리는 클래스 기반의 컴포넌트보다 함수형 컴포넌트의 상태관리가 더 복잡하다.
  - useState 라는 이름의 메소드를 반드시 사용해야한다.
  - useState 에는 상태의 초깃값을 인자로 전달해준다.
    그러면 새로 생성된 상태와 상태변경함수를 담은 배열이 반환된다.
  - 상태변경함수에 새로운 상탯값을 인자로 전달하는 방식으로 변경한다.
    그럴때마다 리-렌더가 된다
  
  - 클래스 기반과 함수형 기반 중 함수형 컴포넌트가 더 쓰인다

  - 예전에는 클래스 컴포넌트만 상태관리를 지원했었다
  - 19년도에 useState가 등장했다
  - 그래서 점점 함수형 컴포넌트 비중이 높아졌다 



























Baby.js

import React from "react";
import styled from "styled-components";


// <p></p> 대신 <MyP></MyP>
const MyP = styled.p` 
font-size : 30px ;
color : blue ;
font-family : monospace ;
`

// 리액트가 제공하는 컴포넌트 타입을 상속받는다.!
class Baby extends React.Component{


  // 이 컴포넌트가 내보낼 DOM
  render(){
    return <> 


              <MyP>얼마 전 친구가 부모가 되었다... 착잡하다.</MyP>
    
    
    </>
  }

}

export default Baby;